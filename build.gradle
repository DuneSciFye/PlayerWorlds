plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
    id "com.gradleup.shadow" version "8.3.3"
}

group = 'net.sivils'
version = '1.0.0'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }

    maven { url = "https://repo.codemc.org/repository/maven-public/" } // CommandAPI
    maven { url = "https://repo.onarandombox.com/content/groups/public/" } // Multiverse-Core
    maven { url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/' } // PlaceholderAPI
    maven { url 'https://nexus.scarsz.me/content/groups/public/' } // DiscordSRV

}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.5-R0.1-SNAPSHOT") // Required dependency for paper

    compileOnly "org.mvplugins.multiverse.core:multiverse-core:5.0.0-SNAPSHOT" // MultiverseCore
    compileOnly "org.mvplugins.multiverse.inventories:multiverse-inventories:5.0.0-SNAPSHOT" // MultiverseInventories
    compileOnly 'me.clip:placeholderapi:2.11.5' // PlaceholderAPI
    compileOnly 'com.discordsrv:discordsrv:1.29.0' // Discord SRV

    implementation "dev.jorel:commandapi-bukkit-shade:10.1.2" // CommandAPI
    implementation 'org.xerial:sqlite-jdbc:3.49.1.0' // SQLite
}

shadowJar {
    relocate 'dev.jorel.commandapi', 'me.dunescifye.libs.commandutils.commandapi'
    archiveBaseName.set("PlayerWorlds")
    archiveClassifier.set("") // removes the "-all" suffix
    archiveVersion.set("")    // removes the version number
}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21")
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
